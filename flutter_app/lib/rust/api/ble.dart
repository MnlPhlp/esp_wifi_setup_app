// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> setupBle() => RustLib.instance.api.crateApiBleSetupBle();

Stream<List<BleDevice>> startScan() =>
    RustLib.instance.api.crateApiBleStartScan();

Future<void> connect({required BleAddress address}) =>
    RustLib.instance.api.crateApiBleConnect(address: address);

Future<void> sendWifiData({required String ssid, required String password}) =>
    RustLib.instance.api
        .crateApiBleSendWifiData(ssid: ssid, password: password);

Future<String> readIp() => RustLib.instance.api.crateApiBleReadIp();

String formatAddress({required BleAddress address}) =>
    RustLib.instance.api.crateApiBleFormatAddress(address: address);

class BleAddress {
  final U8Array6 address;

  const BleAddress({
    required this.address,
  });

  @override
  int get hashCode => address.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BleAddress &&
          runtimeType == other.runtimeType &&
          address == other.address;
}

class BleDevice {
  final BleAddress address;
  final String name;
  final bool isConnected;

  const BleDevice({
    required this.address,
    required this.name,
    required this.isConnected,
  });

  @override
  int get hashCode => address.hashCode ^ name.hashCode ^ isConnected.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BleDevice &&
          runtimeType == other.runtimeType &&
          address == other.address &&
          name == other.name &&
          isConnected == other.isConnected;
}

class U8Array6 extends NonGrowableListView<int> {
  static const arraySize = 6;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array6(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array6.init() : this(Uint8List(arraySize));
}
